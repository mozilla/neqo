name: CI VM
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  merge_group:
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: trace

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  check-vm:
    if: github.actor != 'dependabot[bot]'
    strategy:
      fail-fast: false
      matrix:
        os: [
              freebsd,
              # openbsd, # FIXME: libfuzzer/FuzzerPlatform.h:72:2: error: "Support for your platform has not been implemented"
              # netbsd, # FIXME: NSS package is too old.
              # solaris # FIXME: NSS package is too old.
            ]
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - id: nss-version
        run: echo "minimum=$(cat neqo-crypto/min_version.txt)" >> "$GITHUB_OUTPUT"

      - run: curl -o rustup.sh --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs

      - if: ${{ matrix.os == 'freebsd' }}
        uses: vmactions/freebsd-vm@c3ae29a132c8ef1924775414107a97cac042aad5 # v1.2.0
        with:
          usesh: true
          envs: "CARGO_TERM_COLOR RUST_BACKTRACE RUST_LOG GITHUB_ACTIONS"
          prepare: | # This executes as root
            set -e
            pkg install -y curl llvm nss pkgconf
          run: | # This executes as user
            set -e
            # FIXME: We're only comparing the NSS minor version here.
            NSS_MINOR_VERSION="$(pkg-config --modversion nss | cut -d. -f2)"
            NSS_MINIMUM_VERSION="$(echo ${{ steps.nss-version.outputs.minimum }} | cut -d. -f2)"
            if [ "$NSS_MINOR_VERSION" -lt "$NSS_MINIMUM_VERSION" ]; then
              echo "System NSS package too old (minorversion $NSS_MINOR_VERSION < $NSS_MINIMUM_VERSION); skipping checks"
              exit 0
            fi
            sh rustup.sh --default-toolchain stable --profile minimal --component clippy,llvm-tools -y
            . "$HOME/.cargo/env"
            cargo check --locked --all-targets
            cargo clippy -- -D warnings
            cargo install cargo-llvm-cov --locked
            cargo llvm-cov test --locked --no-fail-fast --lcov --output-path lcov.info
            cargo test --locked --no-fail-fast --release
            rm -rf target # Don't sync this back to host

      - if: ${{ matrix.os == 'openbsd' }}
        uses: vmactions/openbsd-vm@0d65352eee1508bab7cb12d130536d3a556be487 # v1.1.8
        with:
          usesh: true
          envs: "CARGO_TERM_COLOR RUST_BACKTRACE RUST_LOG GITHUB_ACTIONS"
          prepare: | # This executes as root
            set -e
            # TODO: Is there a way to not pin the version of llvm? -z to pkg_add doesn't work.
            pkg_add rust rust-clippy llvm-19.1.7p3 nss pkgconf # rustup doesn't support OpenBSD at all
          run: | # This executes as user
            set -e
            # FIXME: We're only comparing the NSS minor version here.
            NSS_MINOR_VERSION="$(pkg-config --modversion nss | cut -d. -f2)"
            NSS_MINIMUM_VERSION="$(echo ${{ steps.nss-version.outputs.minimum }} | cut -d. -f2)"
            if [ "$NSS_MINOR_VERSION" -lt "$NSS_MINIMUM_VERSION" ]; then
              echo "System NSS package too old (minorversion $NSS_MINOR_VERSION < $NSS_MINIMUM_VERSION); skipping checks"
              exit 0
            fi
            export LIBCLANG_PATH=/usr/local/llvm19/lib
            cargo check --locked --all-targets
            cargo clippy -- -D warnings
            # FIXME: No profiler support in openbsd currently, error is:
            # > error[E0463]: can't find crate for `profiler_builtins`
            # > = note: the compiler may have been built without the profiler runtime
            # export LLVM_COV=/usr/local/llvm19/bin/llvm-cov
            # export LLVM_PROFDATA=/usr/local/llvm19/bin/llvm-profdata
            # cargo install cargo-llvm-cov --locked
            # cargo llvm-cov test --locked --no-fail-fast --lcov --output-path lcov.info
            cargo test --locked --no-fail-fast # Remove this once profiler is supported
            cargo test --locked --no-fail-fast --release
            rm -rf target # Don't sync this back to host

      - if: ${{ matrix.os == 'netbsd' }}
        uses: vmactions/netbsd-vm@46a58bbf03682b4cb24142b97fa315ae52bed573 # v1.1.8
        with:
          usesh: true
          envs: "CARGO_TERM_COLOR RUST_BACKTRACE RUST_LOG GITHUB_ACTIONS"
          prepare: | # This executes as root
            set -e
            /usr/sbin/pkg_add pkgin
            pkgin -y install curl clang nss pkgconf
          run: | # This executes as user
            set -e
            # FIXME: We're only comparing the NSS minor version here.
            NSS_MINOR_VERSION="$(pkg-config --modversion nss | cut -d. -f2)"
            NSS_MINIMUM_VERSION="$(echo ${{ steps.nss-version.outputs.minimum }} | cut -d. -f2)"
            if [ "$NSS_MINOR_VERSION" -lt "$NSS_MINIMUM_VERSION" ]; then
              echo "System NSS package too old (minorversion $NSS_MINOR_VERSION < $NSS_MINIMUM_VERSION); skipping checks"
              exit 0
            fi
            sh rustup.sh --default-toolchain stable --profile minimal --component clippy,llvm-tools -y
            . "$HOME/.cargo/env"
            # FIXME: Why do we need to set this on NetBSD?
            export LD_LIBRARY_PATH=/usr/pkg/lib/nss:/usr/pkg/lib/nspr
            cargo check --locked --all-targets
            cargo clippy -- -D warnings
            # FIXME: No profiler support in netbsd currently, error is:
            # > error[E0463]: can't find crate for `profiler_builtins`
            # > = note: the compiler may have been built without the profiler runtime
            # cargo install cargo-llvm-cov --locked
            # cargo llvm-cov test --locked --no-fail-fast --lcov --output-path lcov.info
            cargo test --locked --no-fail-fast # Remove this once profiler is supported
            cargo test --locked --no-fail-fast --release
            rm -rf target # Don't sync this back to host

      - if: ${{ matrix.os == 'solaris' }}
        uses: vmactions/solaris-vm@170f1f96f376cf7467cc41627e0c7590932fccaa # v1.1.4
        with:
          release: "11.4-gcc"
          usesh: true
          envs: "CARGO_TERM_COLOR RUST_BACKTRACE RUST_LOG GITHUB_ACTIONS"
          prepare: | # This executes as root
            set -e
            pkg install clang-libs nss pkg-config
          run: | # This executes as also as root on Solaris
            set -e
            # FIXME: We're only comparing the NSS minor version here.
            NSS_MINOR_VERSION="$(pkg-config --modversion nss | cut -d. -f2)"
            NSS_MINIMUM_VERSION="$(echo ${{ steps.nss-version.outputs.minimum }} | cut -d. -f2)"
            if [ "$NSS_MINOR_VERSION" -lt "$NSS_MINIMUM_VERSION" ]; then
              echo "System NSS package too old (minorversion $NSS_MINOR_VERSION < $NSS_MINIMUM_VERSION); skipping checks"
              exit 0
            fi
            source <(curl -s https://raw.githubusercontent.com/psumbera/solaris-rust/refs/heads/main/sh.rust-web-install) || true # This doesn't exit with zero on success
            export LIBCLANG_PATH="/usr/lib/amd64"
            cargo check --locked --all-targets
            cargo clippy -- -D warnings
            # FIXME: No profiler support in openbsd currently, error is:
            # > error[E0463]: can't find crate for `profiler_builtins`
            # > = note: the compiler may have been built without the profiler runtime
            # cargo install cargo-llvm-cov --locked
            # cargo llvm-cov test --locked --no-fail-fast --lcov --output-path lcov.info
            cargo test --locked --no-fail-fast # Remove this once profiler is supported
            cargo test --locked --no-fail-fast --release
            rm -rf target # Don't sync this back to host

      - uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          files: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
