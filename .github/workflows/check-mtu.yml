name: Check MTU crate
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  merge_group:
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_TIME_UNIT: 10,30
  RUST_TEST_TIME_INTEGRATION: 10,30
  RUST_TEST_TIME_DOCTEST: 10,30

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash
    working-directory: mtu # Run all checks in the mtu directory

jobs:
  toolchains:
    name: Determine toolchains
    runs-on: ubuntu-24.04
    outputs:
      toolchains: ${{ steps.toolchains.outputs.toolchains }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: Cargo.toml
          persist-credentials: false
      - id: toolchains
        run: |
          msrv="$(grep rust-version Cargo.toml | tr -d '"' | cut -f3 -d\ )"
          echo "toolchains=[\"$msrv\", \"stable\", \"nightly\"]" >> "$GITHUB_OUTPUT"

  check:
    name: Check code
    needs: toolchains
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm, macos-15, windows-2025]
        rust-toolchain: ${{ fromJSON(needs.toolchains.outputs.toolchains) }}
        type: [debug]
        include:
          # Also do some release builds on the latest OS versions.
          - os: ubuntu-24.04
            rust-toolchain: stable
            type: release
          - os: macos-15
            rust-toolchain: stable
            type: release
          - os: windows-2025
            rust-toolchain: stable
            type: release
          # Also do some debug builds on the oldest OS versions.
          - os: ubuntu-22.04
            rust-toolchain: stable
            type: debug
          - os: macos-13
            rust-toolchain: stable
            type: debug
          - os: windows-2022
            rust-toolchain: stable
            type: debug
    env:
      BUILD_TYPE: ${{ matrix.type == 'release' && '--release' || '' }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: ./.github/actions/rust
        with:
          version: ${{ matrix.rust-toolchain }}
          components: ${{ matrix.rust-toolchain == 'nightly' && 'llvm-tools' || '' }} ${{ matrix.rust-toolchain == 'nightly' && 'rust-src' || '' }}
          tools: ${{ matrix.rust-toolchain == 'nightly' && 'cargo-llvm-cov, ' || '' }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check
        run: |
          OPTIONS=(--all-targets)
          if [ "$BUILD_TYPE" ]; then
            OPTIONS+=("$BUILD_TYPE")
          fi
          cargo check "${OPTIONS[@]}"

      - name: Run tests and determine coverage
        env:
          RUST_LOG: trace
          TOOLCHAIN: ${{ matrix.rust-toolchain }}
          WINDOWS: ${{ startsWith(matrix.os, 'windows') && 'windows' || '' }}"
          TYPE: ${{ matrix.type }}
        run: |
          OPTIONS=(--no-fail-fast)
          if [ "$BUILD_TYPE" ]; then
            OPTIONS+=("$BUILD_TYPE")
          fi
          if [ "$TOOLCHAIN" == "nightly" ] && [ "$TYPE" == "debug" ]; then
            cargo llvm-cov test --mcdc --include-ffi "${OPTIONS[@]}" --codecov --output-path codecov.json
          else
            if [ "$WINDOWS" == "windows" ]; then
              # The codegen_windows_bindings test only succeeds when run via llvm-cov?!
              OPTIONS+=(-- --skip codegen_windows_bindings)
            fi
            cargo test "${OPTIONS[@]}"
          fi
          cargo bench --no-run

      - uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          files: codecov.json
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.type == 'debug' && matrix.rust-toolchain == 'nightly'

      - name: Run tests with sanitizers
        if: (matrix.os == 'ubuntu-24.04' || matrix.os == 'macos-15') && matrix.rust-toolchain == 'nightly'
        env:
          RUST_LOG: trace
          ASAN_OPTIONS: detect_leaks=1:detect_stack_use_after_return=1
          OS: ${{ matrix.os }}
        run: |
          if [ "$OS" = "ubuntu-24.04" ]; then
            sudo apt-get install -y --no-install-recommends llvm
            TARGET="x86_64-unknown-linux-gnu"
            SANITIZERS="address thread leak memory"
          elif [ "$OS" = "macos-15" ]; then
            # llvm-symbolizer (as part of llvm) is installed by default on macOS runners
            TARGET="aarch64-apple-darwin"
            # no memory and leak sanitizer support yet
            SANITIZERS="address thread"
            # Suppress non-mtu leaks on macOS. TODO: Check occasionally if these are still needed.
            {
              echo "leak:dyld4::RuntimeState"
              echo "leak:fetchInitializingClassList"
              echo "leak:std::rt::lang_start_internal"
            } > suppressions.txt
            # shellcheck disable=SC2155
            export LSAN_OPTIONS="suppressions=$(pwd)/suppressions.txt"
          fi
          for sanitizer in $SANITIZERS; do
            echo "Running tests with $sanitizer sanitizer..."
            export RUSTFLAGS="-Z sanitizer=$sanitizer"
            export RUSTDOCFLAGS="$RUSTFLAGS"
            cargo +nightly test -Z build-std --target "$TARGET"
          done


  check-vm:
    name: Check on VMs
    strategy:
      fail-fast: false
      matrix:
        os: [freebsd, openbsd, netbsd, solaris]
    runs-on: ubuntu-24.04
    env:
      RUST_LOG: trace

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - run: curl -o rustup.sh --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs

      - if: matrix.os == 'freebsd'
        uses: vmactions/freebsd-vm@966989c456d41351f095a421f60e71342d3bce41 # v1.2.1
        with:
          usesh: true
          envs: "CARGO_TERM_COLOR RUST_BACKTRACE RUST_LOG GITHUB_ACTIONS RUST_TEST_TIME_UNIT RUST_TEST_TIME_INTEGRATION RUST_TEST_TIME_DOCTEST"
          prepare: | # This executes as root
            set -e
            pkg install -y curl llvm
          run: | # This executes as user
            set -e
            sh rustup.sh --default-toolchain nightly --profile minimal --component clippy,llvm-tools -y
            . "$HOME/.cargo/env"
            cargo check --all-targets
            cargo clippy -- -D warnings
            cargo install cargo-llvm-cov --locked
            cargo llvm-cov test --mcdc --include-ffi --no-fail-fast --codecov --output-path codecov.json
            cargo test --no-fail-fast --release
            rm -rf target # Don't sync this back to host

      - if: matrix.os == 'openbsd'
        uses: vmactions/openbsd-vm@0d65352eee1508bab7cb12d130536d3a556be487 # v1.1.8
        with:
          usesh: true
          envs: "CARGO_TERM_COLOR RUST_BACKTRACE RUST_LOG GITHUB_ACTIONS RUST_TEST_TIME_UNIT RUST_TEST_TIME_INTEGRATION RUST_TEST_TIME_DOCTEST"
          prepare: | # This executes as root
            set -e
            # TODO: Is there a way to not pin the version of llvm? -z to pkg_add doesn't work.
            pkg_add rust rust-clippy llvm-19.1.7p3 # rustup doesn't support OpenBSD at all
          run: | # This executes as user
            set -e
            export LIBCLANG_PATH=/usr/local/llvm19/lib
            cargo check --all-targets
            cargo clippy -- -D warnings
            # FIXME: No profiler support in openbsd currently, error is:
            # > error[E0463]: can't find crate for `profiler_builtins`
            # > = note: the compiler may have been built without the profiler runtime
            # export LLVM_COV=/usr/local/llvm19/bin/llvm-cov
            # export LLVM_PROFDATA=/usr/local/llvm19/bin/llvm-profdata
            # cargo install cargo-llvm-cov --locked
            # cargo llvm-cov test --mcdc --include-ffi --no-fail-fast --codecov --output-path codecov.json
            cargo test --no-fail-fast # Remove this once profiler is supported
            cargo test --no-fail-fast --release
            rm -rf target # Don't sync this back to host

      - if: matrix.os == 'netbsd'
        uses: vmactions/netbsd-vm@46a58bbf03682b4cb24142b97fa315ae52bed573 # v1.1.8
        with:
          usesh: true
          envs: "CARGO_TERM_COLOR RUST_BACKTRACE RUST_LOG GITHUB_ACTIONS RUST_TEST_TIME_UNIT RUST_TEST_TIME_INTEGRATION RUST_TEST_TIME_DOCTEST"
          prepare: | # This executes as root
            set -e
            /usr/sbin/pkg_add pkgin
            pkgin -y install curl clang
          run: | # This executes as user
            set -e
            sh rustup.sh --default-toolchain nightly --profile minimal --component clippy,llvm-tools -y
            . "$HOME/.cargo/env"
            cargo check --all-targets
            cargo clippy -- -D warnings
            # FIXME: No profiler support in netbsd currently, error is:
            # > error[E0463]: can't find crate for `profiler_builtins`
            # > = note: the compiler may have been built without the profiler runtime
            # cargo install cargo-llvm-cov --locked
            # cargo llvm-cov test --mcdc --include-ffi --no-fail-fast --codecov --output-path codecov.json
            cargo test --no-fail-fast # Remove this once profiler is supported
            cargo test --no-fail-fast --release
            rm -rf target # Don't sync this back to host

      - if: matrix.os == 'solaris'
        uses: vmactions/solaris-vm@170f1f96f376cf7467cc41627e0c7590932fccaa # v1.1.4
        with:
          release: "11.4-gcc"
          usesh: true
          envs: "CARGO_TERM_COLOR RUST_BACKTRACE RUST_LOG GITHUB_ACTIONS RUST_TEST_TIME_UNIT RUST_TEST_TIME_INTEGRATION RUST_TEST_TIME_DOCTEST"
          prepare: | # This executes as root
            set -e
            pkg install clang-libs
          run: | # This executes as also as root on Solaris
            set -e
            source <(curl -s https://raw.githubusercontent.com/psumbera/solaris-rust/refs/heads/main/sh.rust-web-install) || true # This doesn't exit with zero on success
            export LIBCLANG_PATH="/usr/lib/amd64"
            cargo check --all-targets
            cargo clippy -- -D warnings
            # FIXME: No profiler support in openbsd currently, error is:
            # > error[E0463]: can't find crate for `profiler_builtins`
            # > = note: the compiler may have been built without the profiler runtime
            # cargo install cargo-llvm-cov --locked
            # cargo llvm-cov test --mcdc --include-ffi --no-fail-fast --codecov --output-path codecov.json
            cargo test --no-fail-fast # Remove this once profiler is supported
            cargo test --no-fail-fast --release
            rm -rf target # Don't sync this back to host

      - uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          files: codecov.json
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  check-android:
    name: Check Android builds
    runs-on: ubuntu-24.04
    env:
      # https://searchfox.org/mozilla-central/search?q=NDK_VERSION =&path=python/mozboot/mozboot/android.py
      NDK_VERSION: 27.2.12479018 # r27c
      # https://searchfox.org/mozilla-central/search?q=\bapi_level=&path=taskcluster/scripts/misc/build-llvm-common.sh&regexp=true
      API_LEVEL: 21

    strategy:
      matrix:
        include:
          - target: x86_64-linux-android
            emulator-arch: x86_64
            # Note that x86_64 image is only available for API 21+. See
            # https://github.com/ReactiveCircus/android-emulator-runner?tab=readme-ov-file#configurations.
          - target: i686-linux-android
            emulator-arch: x86
          # FIXME: https://github.com/ReactiveCircus/android-emulator-runner/issues/404
          # - target: armv7-linux-androideabi
          #   emulator-arch: arm64-v8

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: mozilla/neqo
        sparse-checkout: |
          .github/actions/rust
        path: neqo
        persist-credentials: false

    - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
      with:
        distribution: zulu
        java-version: 23

    - uses: android-actions/setup-android@9fc6c4e9069bf8d3d10b2204b1fb8f6ef7065407 # v3.2.2
    - env:
        NDK_VERSION: ${{ env.NDK_VERSION }}
      run: sdkmanager --install "ndk;$NDK_VERSION"

    - uses: ./neqo/.github/actions/rust
      with:
        version: stable
        targets: ${{ matrix.target }}
        tools: cargo-ndk
        token: ${{ secrets.GITHUB_TOKEN }}

    - env:
        TARGET: ${{ matrix.target }}
      run: cargo ndk --bindgen -t "$TARGET" test --no-run

    - env:
        TARGET: ${{ matrix.target }}
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
        cat <<'EOF' > /tmp/rust-android-run-tests-on-emulator.sh
        #!/bin/bash
        set -e
        adb shell ip addr show
        export GITHUB_ACTIONS=1
        adb wait-for-device
        while [ -z "$(adb shell getprop sys.boot_completed | tr -d '\r')" ]; do sleep 1; done
        any_failures=0
        for test in $(find target/$TARGET/debug/deps/ -type f -executable ! -name "*.so" -name "*-*"); do
          adb push "$test" /data/local/tmp/
          adb shell chmod +x /data/local/tmp/$(basename "$test")
          # See https://unix.stackexchange.com/a/451140/409256
          adb shell "API_LEVEL=$API_LEVEL /data/local/tmp/$(basename "$test") || echo _FAIL_" 2>&1 | tee output
          grep _FAIL_ output && any_failures=1
        done
        exit $any_failures
        EOF
        chmod a+x /tmp/rust-android-run-tests-on-emulator.sh

    - uses: reactivecircus/android-emulator-runner@1dcd0090116d15e7c562f8db72807de5e036a4ed # v2.34.0
      with:
        api-level: ${{ env.API_LEVEL }}
        arch: ${{ matrix.emulator-arch == 'arm64-v8' && 'arm64-v8a' || matrix.emulator-arch }}
        ndk: ${{ env.NDK_VERSION }}
        emulator-boot-timeout: 120
        script: /tmp/rust-android-run-tests-on-emulator.sh
      env:
        TARGET: ${{ matrix.target }}
