name: CI
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  merge_group:
  workflow_dispatch:
    inputs:
      run_benchmarks:
        description: 'Run benchmarks'
        type: boolean
        required: false
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_TIME_UNIT: 10,30
  RUST_TEST_TIME_INTEGRATION: 10,30
  RUST_TEST_TIME_DOCTEST: 10,30

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  toolchains:
    runs-on: ubuntu-24.04
    outputs:
      toolchains: ${{ steps.toolchains.outputs.toolchains }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: Cargo.toml
          persist-credentials: false

      - id: toolchains
        run: |
          msrv="$(grep rust-version Cargo.toml | tr -d '"' | cut -f3 -d\ )"
          echo "toolchains=[\"$msrv\", \"stable\", \"nightly\"]" >> "$GITHUB_OUTPUT"

  check:
    needs: toolchains
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm, macos-15, windows-2025]
        rust-toolchain: ${{ fromJSON(needs.toolchains.outputs.toolchains) }}
        type: [debug]
        # Include some dynamically-linked release builds, to check that that works on all platforms.
        include:
          - os: ubuntu-24.04
            rust-toolchain: stable
            type: release
          - os: macos-15
            rust-toolchain: stable
            type: release
          - os: windows-2025
            rust-toolchain: stable
            type: release
          # TODO: Remove once Neqo's MSRV is increased to 1.82.0. NSS build
          # fails on Windows with Rust 1.81.0. Firefox does not use Rust 1.81.0
          # (except for testing, see
          # https://bugzilla.mozilla.org/show_bug.cgi?id=1968057#c1). Firefox
          # uses Rust 1.82.0. Thus this is not worth fixing. Let's explicitly
          # use Rust 1.82.0 here for now.
          - os: windows-2025
            rust-toolchain: 1.82.0
            type: debug
        exclude:
          # TODO: Remove once Neqo's MSRV is increased to 1.82.0. NSS build
          # fails on Windows with Rust 1.81.0. Firefox does not use Rust 1.81.0
          # (except for testing, see
          # https://bugzilla.mozilla.org/show_bug.cgi?id=1968057#c1). Firefox
          # uses Rust 1.82.0. Thus this is not worth fixing. Let's explicitly
          # use Rust 1.82.0 here for now.
          - os: windows-2025
            rust-toolchain: 1.81.0
            type: debug
    env:
      BUILD_TYPE: ${{ matrix.type == 'release' && '--release' || '' }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: ./.github/actions/rust
        with:
          version: ${{ matrix.rust-toolchain }}
          components: ${{ matrix.rust-toolchain == 'stable' && 'llvm-tools' || '' }}
          tools: ${{ matrix.rust-toolchain == 'stable' && 'cargo-llvm-cov, ' || '' }} junit-test
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: nss-version
        run: echo "minimum=$(cat neqo-crypto/min_version.txt)" >> "$GITHUB_OUTPUT"

      - uses: ./.github/actions/nss
        with:
          minimum-version: ${{ steps.nss-version.outputs.minimum }}

      - name: Check
        run: |
          # shellcheck disable=SC2086
          cargo check $BUILD_TYPE --locked --all-targets --features ci

      - name: Run tests and determine coverage
        env:
          RUST_LOG: trace
          RUST_BACKTRACE: 1
          RUST_TEST_TIME_UNIT: 10,30
          RUST_TEST_TIME_INTEGRATION: 10,30
          RUST_TEST_TIME_DOCTEST: 10,30
          TOOLCHAIN: ${{ matrix.rust-toolchain }}
        run: |
          DUMP_SIMULATION_SEEDS="$(pwd)/simulation-seeds"
          export DUMP_SIMULATION_SEEDS
          # shellcheck disable=SC2086
          if [ "$TOOLCHAIN" == "stable" ]; then
            cargo llvm-cov test $BUILD_TYPE --locked --include-ffi --features ci --codecov --output-path codecov.json
          else
            cargo test $BUILD_TYPE --locked --features ci
          fi
          # shellcheck disable=SC2086
          junit-test $BUILD_TYPE

      - name: Run client/server transfer
        run: |
          # shellcheck disable=SC2086
          cargo build $BUILD_TYPE --bin neqo-client --bin neqo-server
          "target/$BUILD_DIR/neqo-server" "$HOST:4433" &
          PID=$!
          # Give the server time to start.
          sleep 1
          "target/$BUILD_DIR/neqo-client" --output-dir . "https://$HOST:4433/$SIZE"
          kill $PID
          [ "$(wc -c <"$SIZE")" -eq "$SIZE" ] || exit 1
        env:
          HOST: localhost
          SIZE: 54321
          RUST_LOG: warn
          BUILD_DIR: ${{ matrix.type == 'release' && 'release' || 'debug' }}

      - name: CodeCov Windows workaround
        if: matrix.os == 'windows-2025' && matrix.type == 'debug' && matrix.rust-toolchain == 'stable'
        run: |
          # FIXME: Without this, the codecov/codecov-action fails. No idea why it's looking under C:/msys64 now, it shouldn't.
          mkdir -p C:/msys64/home/runneradmin/
          touch C:/msys64/home/runneradmin/.gitconfig

      - uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          files: codecov.json
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.type == 'debug' && matrix.rust-toolchain == 'stable'

      - uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        if: ${{ always() }}
        with:
          files: junit.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Save simulation seeds artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: simulation-seeds-${{ matrix.os }}-${{ matrix.rust-toolchain }}-${{ matrix.type }}
          path: simulation-seeds
          compression-level: 9

  check-cargo-lock:
    name: Ensure `Cargo.lock` contains all required dependencies
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - run: cargo update -w --locked

  bench:
    needs: [check]
    if: ${{ !cancelled() && (github.event_name != 'workflow_dispatch' || github.event.inputs.run_benchmarks) && github.actor != 'dependabot[bot]' && github.event_name != 'merge_group' }}
    uses: ./.github/workflows/bench.yml

  check-android:
    runs-on: ubuntu-24.04
    env:
      # https://searchfox.org/mozilla-central/search?q=NDK_VERSION =&path=python/mozboot/mozboot/android.py
      NDK_VERSION: 27.2.12479018 # r27c
      # https://searchfox.org/mozilla-central/search?q=\bapi_level=&path=taskcluster/scripts/misc/build-llvm-common.sh&regexp=true
      # However, NSS requires an API >= 23 for a few symbols.
      API_LEVEL: 23

    strategy:
      matrix:
        include:
          - target: x86_64-linux-android
            emulator-arch: x86_64
            # Note that x86_64 image is only available for API 21+. See
            # https://github.com/ReactiveCircus/android-emulator-runner?tab=readme-ov-file#configurations.
          - target: i686-linux-android
            emulator-arch: x86
          # FIXME: https://github.com/ReactiveCircus/android-emulator-runner/issues/404
          # - target: armv7-linux-androideabi
          #   emulator-arch: arm64-v8

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: zulu
          java-version: 23

      - uses: android-actions/setup-android@9fc6c4e9069bf8d3d10b2204b1fb8f6ef7065407 # v3.2.2
      - run: sdkmanager --install "ndk;$NDK_VERSION"

      - uses: ./.github/actions/rust
        with:
          version: stable
          targets: ${{ matrix.target }}
          tools: cargo-ndk
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: nss-version
        run: echo "minimum=$(cat neqo-crypto/min_version.txt)" >> "$GITHUB_OUTPUT"

      - uses: ./.github/actions/nss
        with:
          minimum-version: ${{ steps.nss-version.outputs.minimum }}
          target: ${{ matrix.target }}

      - env:
          MATRIX_TARGET: ${{ matrix.target }}
        run: cargo ndk --bindgen --platform "$API_LEVEL" --target $MATRIX_TARGET test --no-run

      - env:
          TARGET: ${{ matrix.target }}
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          cat <<'EOF' > /tmp/rust-android-run-tests-on-emulator.sh
          #!/bin/bash
          set -e
          adb wait-for-device
          while [ -z "$(adb shell getprop sys.boot_completed | tr -d '\r')" ]; do sleep 1; done
          any_failures=0
          TMP=/data/local/tmp
          adb push "test-fixture/db" "$TMP/"
          adb push "$LD_LIBRARY_PATH" "$TMP/"
          for test in $(find target/$TARGET/debug/deps/ -type f -executable ! -name "*.so" -name "*-*"); do
            adb push "$test" "$TMP/"
            adb shell chmod +x "$TMP/$(basename "$test")"
            # See https://unix.stackexchange.com/a/451140/409256
            adb shell "CARGO_TERM_COLOR=always RUST_BACKTRACE=1 LD_LIBRARY_PATH=$TMP/lib NSS_DB_PATH=$TMP/db API_LEVEL=$API_LEVEL $TMP/$(basename "$test") || echo _FAIL_" 2>&1 | tee output
            grep _FAIL_ output > /dev/null && any_failures=1
          done
          exit $any_failures
          EOF
          chmod a+x /tmp/rust-android-run-tests-on-emulator.sh

      - uses: reactivecircus/android-emulator-runner@1dcd0090116d15e7c562f8db72807de5e036a4ed # v2.34.0
        with:
          api-level: ${{ env.API_LEVEL }}
          arch: ${{ matrix.emulator-arch == 'arm64-v8' && 'arm64-v8a' || matrix.emulator-arch }}
          ndk: ${{ env.NDK_VERSION }}
          emulator-boot-timeout: 120
          disk-size: 2G
          script: /tmp/rust-android-run-tests-on-emulator.sh
        env:
          TARGET: ${{ matrix.target }}
