name: Fetch and build NSS
description: Fetch and build NSS

inputs:
  type:
    description: "Whether to do a debug or release build of NSS"
    default: "Release"

# This step might be removed if the distro included a recent enough
# version of NSS.  Ubuntu 20.04 only has 3.49, which is far too old.
# (neqo-crypto/build.rs would also need to query pkg-config to get the
# right build flags rather than building NSS.)
#
# Also see https://github.com/mozilla/neqo/issues/1711

runs:
  using: composite
  steps:
    - name: Install system NSS (Linux)
      shell: bash
      if: runner.os == 'Linux'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libnss3-dev pkg-config

    - name: Install system NSS (MacOS)
      shell: bash
      if: runner.os == 'MacOS'
      run: |
        brew update
        brew install nss

    - name: Check system NSS version
      shell: bash
      run: |
        if ! command -v pkg-config &> /dev/null; then
          echo "pkg-config: not found"
          echo "BUILD_NSS=1" >> "$GITHUB_ENV"
          exit 0
        fi
        if ! pkg-config --exists nss; then
          echo "pkg-config: NSS not found"
          echo "BUILD_NSS=1" >> "$GITHUB_ENV"
          exit 0
        fi
        NSS_VERSION="$(pkg-config --modversion nss)"
        if [ "$?" -ne 0 ]; then
          echo "pkg-config: failed to determine NSS version"
          echo "BUILD_NSS=1" >> "$GITHUB_ENV"
          exit 0
        fi
        NSS_MAJOR=$(echo "$NSS_VERSION" | cut -d. -f1)
        NSS_MINOR=$(echo "$NSS_VERSION" | cut -d. -f2)
        REQ_NSS_MAJOR=$(cut -d. -f1 < neqo-crypto/min_version.txt)
        REQ_NSS_MINOR=$(cut -d. -f2 < neqo-crypto/min_version.txt)
        if [[ "$NSS_MAJOR" -lt "$REQ_NSS_MAJOR" || "$NSS_MAJOR" -eq "$REQ_NSS_MAJOR" && "$NSS_MINOR" -lt "$REQ_NSS_MINOR" ]]; then
          echo "System NSS is too old: $NSS_VERSION"
          echo "BUILD_NSS=1" >> "$GITHUB_ENV"
          exit 0
        fi
        echo "System NSS is suitable: $NSS_VERSION"
        echo "BUILD_NSS=0" >> "$GITHUB_ENV"

    - name: Install build dependencies (Linux)
      shell: bash
      if: runner.os == 'Linux' && env.BUILD_NSS == '1'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: sudo apt-get install -y --no-install-recommends git mercurial gyp ninja-build

    - name: Install build dependencies (MacOS)
      shell: bash
      if: runner.os == 'MacOS' && env.BUILD_NSS == '1'
      run: brew install mercurial ninja

    - name: Install build dependencies (Windows)
      shell: bash
      if: runner.os == 'Windows' && env.BUILD_NSS == '1'
      run: |
        # shellcheck disable=SC2028
        {
          echo /c/msys64/usr/bin
          echo /c/msys64/mingw64/bin
        } >> "$GITHUB_PATH"
        /c/msys64/usr/bin/pacman -S --noconfirm python3-pip mercurial nsinstall

    - name: Install gyp
      shell: bash
      if: (runner.os == 'MacOS' || runner.os == 'Windows') && env.BUILD_NSS == '1'
      run: |
        echo "gyp-next>=0.18.1" > req.txt
        python3 -m pip install --break-system-packages -r req.txt

    # Ideally, we'd use actions/checkout. But things are sufficiently flaky that we're better off
    # trying both hg and git.

    - name: Checkout NSS
      shell: bash
      if: env.BUILD_NSS == '1'
      run: |
        git clone --depth=1 https://github.com/nss-dev/nss "${{ github.workspace }}/nss" || \
          hg clone https://hg.mozilla.org/projects/nss "${{ github.workspace }}/nss"

    - name: Checkout NSPR
      shell: bash
      if: env.BUILD_NSS == '1'
      run: |
        git clone --depth=1 https://github.com/nss-dev/nspr "${{ github.workspace }}/nspr" || \
          hg clone https://hg.mozilla.org/projects/nspr "${{ github.workspace }}/nspr"

    - name: Cache NSS
      if: env.BUILD_NSS == '1'
      id: cache-nss
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: ${{ github.workspace }}/dist
        key: nss-${{ runner.os }}-${{ runner.arch }}-${{ inputs.type }}-${{ hashFiles('nss/lib/nss/nss.h') }}

    - name: Build
      shell: bash
      if: env.BUILD_NSS == '1'
      run: |
        which cargo
        echo $PATH
        if [ "${{ inputs.type }}" != "Debug" ]; then
          # We want to do an optimized build for accurate CPU profiling, but
          # we also want debug symbols and frame pointers for that, which the normal optimized NSS
          # build process doesn't provide.
          OPT="-o"
          [ "${{ runner.os }}" != "Windows" ] && export CFLAGS="-ggdb3 -fno-omit-frame-pointer"
        fi
        NSS_TARGET="${{ inputs.type }}"
        echo "NSS_TARGET=$NSS_TARGET" >> "$GITHUB_ENV"
        NSS_OUT="$NSS_DIR/../dist/$NSS_TARGET"
        echo "LD_LIBRARY_PATH=$NSS_OUT/lib" >> "$GITHUB_ENV"
        echo "DYLD_FALLBACK_LIBRARY_PATH=$NSS_OUT/lib" >> "$GITHUB_ENV"
        echo "$NSS_OUT/lib" >> "$GITHUB_PATH"
        echo "NSS_DIR=$NSS_DIR" >> "$GITHUB_ENV"
        if [ "${{ steps.cache-nss.outputs.cache-hit }}" != "true" ]; then
          $NSS_DIR/build.sh -g -Ddisable_tests=1 $OPT --static
        fi
      env:
        NSS_DIR: ${{ github.workspace }}/nss
        NSPR_DIR: ${{ github.workspace }}/nspr
