name: Install NSS
description: Install NSS

inputs:
  type:
    description: "When building, whether to do a debug or release build of NSS"
    default: "Release"
  minimum-version:
    description: "Minimum required version of NSS"
    required: true

runs:
  using: composite
  steps:
    - name: Install system NSS (Linux)
      shell: bash
      if: runner.os == 'Linux' && runner.environment == 'github-hosted'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libnss3-dev pkg-config

    - name: Install system NSS (MacOS)
      shell: bash
      if: runner.os == 'MacOS' && runner.environment == 'github-hosted'
      run: |
        brew update
        brew install nss

    - name: Check system NSS version
      shell: bash
      run: |
        if ! command -v pkg-config &> /dev/null; then
          echo "pkg-config: not found"
          echo "BUILD_NSS=1" >> "$GITHUB_ENV"
          exit 0
        fi
        if ! pkg-config --exists nss; then
          echo "pkg-config: NSS not found"
          echo "BUILD_NSS=1" >> "$GITHUB_ENV"
          exit 0
        fi
        NSS_VERSION="$(pkg-config --modversion nss)"
        if [ "$?" -ne 0 ]; then
          echo "pkg-config: failed to determine NSS version"
          echo "BUILD_NSS=1" >> "$GITHUB_ENV"
          exit 0
        fi
        NSS_MAJOR=$(echo "$NSS_VERSION" | cut -d. -f1)
        NSS_MINOR=$(echo "$NSS_VERSION" | cut -d. -f2)
        REQ_NSS_MAJOR=$(echo "${{ inputs.minimum-version}}" | cut -d. -f1)
        REQ_NSS_MINOR=$(echo "${{ inputs.minimum-version}}" | cut -d. -f2)
        if [[ "$NSS_MAJOR" -lt "$REQ_NSS_MAJOR" || "$NSS_MAJOR" -eq "$REQ_NSS_MAJOR" && "$NSS_MINOR" -lt "$REQ_NSS_MINOR" ]]; then
          echo "System NSS is too old: $NSS_VERSION"
          echo "BUILD_NSS=1" >> "$GITHUB_ENV"
          exit 0
        fi
        echo "System NSS is suitable: $NSS_VERSION"
        echo "BUILD_NSS=0" >> "$GITHUB_ENV"

    - name: Checkout NSS
      if: env.BUILD_NSS == '1'
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        repository: nss-dev/nss
        path: nss

    - name: Checkout NSPR
      if: env.BUILD_NSS == '1'
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        repository: nss-dev/nspr
        path: nspr

    - name: Install build dependencies (Linux)
      shell: bash
      if: runner.os == 'Linux' && env.BUILD_NSS == '1' && runner.environment == 'github-hosted'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: sudo apt-get install -y --no-install-recommends gyp ninja-build

    - name: Install build dependencies (MacOS)
      shell: bash
      if: runner.os == 'MacOS' && env.BUILD_NSS == '1'
      run: |
        brew install ninja
        echo "gyp-next>=0.18.1" > req.txt
        python3 -m pip install --user --break-system-packages -r req.txt
        echo "$(python3 -m site --user-base)/bin" >> "$GITHUB_PATH"

    - name: Install build dependencies (Windows)
      shell: bash
      if: runner.os == 'Windows' && env.BUILD_NSS == '1'
      run: |
        # shellcheck disable=SC2028
        {
          echo C:/msys64/usr/bin
          echo C:/msys64/mingw64/bin
        } >> "$GITHUB_PATH"
        /c/msys64/usr/bin/pacman -S --noconfirm python3-pip nsinstall
        echo "gyp-next>=0.18.1" > req.txt
        python3 -m pip install -r req.txt

    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows' && env.BUILD_NSS == '1'
      uses: ilammy/msvc-dev-cmd@v1
      # TODO: Would like to pin this, but the Mozilla org allowlist requires "ilammy/msvc-dev-cmd@v1*"
      # uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0

    - name: Set up build environment (Windows)
      shell: bash
      if: runner.os == 'Windows' && env.BUILD_NSS == '1'
      run: |
        {
          echo "GYP_MSVS_OVERRIDE_PATH=$VSINSTALLDIR"
          echo "GYP_MSVS_VERSION=2022"
          echo "BASH=$SHELL"
        } >> "$GITHUB_ENV"
        # See https://github.com/ilammy/msvc-dev-cmd#name-conflicts-with-shell-bash
        rm /usr/bin/link.exe || true

    - name: Build
      shell: bash
      if: env.BUILD_NSS == '1'
      run: |
        if [ "${{ inputs.type }}" != "Debug" ]; then
          # We want to do an optimized build for accurate CPU profiling, but
          # we also want debug symbols and frame pointers for that, which the normal optimized NSS
          # build process doesn't provide.
          OPT="-o"
          [ "${{ runner.os }}" != "Windows" ] && export CFLAGS="-ggdb3 -fno-omit-frame-pointer"
        fi
        NSS_TARGET="${{ inputs.type }}"
        echo "NSS_TARGET=$NSS_TARGET" >> "$GITHUB_ENV"
        NSS_OUT="$NSS_DIR/../dist/$NSS_TARGET"
        echo "LD_LIBRARY_PATH=$NSS_OUT/lib" >> "$GITHUB_ENV"
        echo "DYLD_FALLBACK_LIBRARY_PATH=$NSS_OUT/lib" >> "$GITHUB_ENV"
        echo "$NSS_OUT/lib" >> "$GITHUB_PATH"
        echo "NSS_DIR=$NSS_DIR" >> "$GITHUB_ENV"
        $NSS_DIR/build.sh -g -Ddisable_tests=1 $OPT --static
      env:
        NSS_DIR: ${{ github.workspace }}/nss
        NSPR_DIR: ${{ github.workspace }}/nspr
