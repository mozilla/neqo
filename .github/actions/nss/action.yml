name: Install NSS
description: Install NSS

inputs:
  type:
    description: "When building, whether to do a debug or release build of NSS"
    default: "Release"
  minimum-version:
    description: "Minimum required version of NSS"
    required: true
  target:
    description: "Target for cross-compilation"
    default: ""

runs:
  using: composite
  steps:
    - name: Install system NSS (Linux)
      shell: bash
      if: ${{ runner.os == 'Linux' && runner.environment == 'github-hosted' && inputs.target == '' }}
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        [ "$APT_UPDATED" ] || sudo apt-get update && echo "APT_UPDATED=1" >> "$GITHUB_ENV"
        sudo apt-get install -y --no-install-recommends libnss3-dev pkg-config

    - name: Install system NSS (MacOS)
      shell: bash
      if: ${{ runner.os == 'MacOS' && runner.environment == 'github-hosted' && inputs.target == '' }}
      run: |
        [ "$BREW_UPDATED" ] || brew update && echo "BREW_UPDATED=1" >> "$GITHUB_ENV"
        brew install nss

    - name: Check system NSS version
      id: nss
      env:
        MIN_VERSION: ${{ inputs.minimum-version }}
      shell: bash
      if: inputs.target == ''
      run: |
        if ! command -v pkg-config &> /dev/null; then
          echo "pkg-config: not found"
          exit 0
        fi
        if ! pkg-config --exists nss; then
          echo "pkg-config: NSS not found"
          exit 0
        fi
        NSS_VERSION="$(pkg-config --modversion nss)"
        if [ "$?" -ne 0 ]; then
          echo "pkg-config: failed to determine NSS version"
          exit 0
        fi
        NSS_MAJOR=$(echo "$NSS_VERSION" | cut -d. -f1)
        NSS_MINOR=$(echo "$NSS_VERSION" | cut -d. -f2)
        REQ_NSS_MAJOR=$(echo "$MIN_VERSION" | cut -d. -f1)
        REQ_NSS_MINOR=$(echo "$MIN_VERSION" | cut -d. -f2)
        if [[ "$NSS_MAJOR" -lt "$REQ_NSS_MAJOR" || "$NSS_MAJOR" -eq "$REQ_NSS_MAJOR" && "$NSS_MINOR" -lt "$REQ_NSS_MINOR" ]]; then
          echo "System NSS is too old: $NSS_VERSION"
          exit 0
        fi
        echo "System NSS is suitable: $NSS_VERSION"
        echo "use_system_nss=1" >> "$GITHUB_OUTPUT"

    - name: Use sccache
      # Apparently the action can't be installed twice in the same workflow, so check if
      # it's already installed by checking if the SCCACHE_ENABLED environment variable is set
      # (which every "use" of this action needs to therefore set)
      #
      # Also, only enable sscache on our self-hosted runner, because the GitHub cache limit
      # is too small for this to be effective there.
      if: ${{ env.SCCACHE_ENABLED != '1' && !steps.nss.outputs.use_system_nss && runner.environment != 'github-hosted' }}
      uses: mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd # v0.0.4

    - name: Enable sscache
      if: ${{ !steps.nss.outputs.use_system_nss && runner.environment != 'github-hosted' }}
      env:
        RUNNER_ENVIRONMENT: ${{ runner.environment }}
      shell: bash
      run: |
        echo "SCCACHE_ENABLED=1" >> "$GITHUB_ENV"
        if [ "${{ runner.os }}" != "Windows" ]; then
          # TODO: Figure out how to make this work on Windows
          echo "SCCACHE_CC=sccache cc" >> "$GITHUB_ENV"
          echo "SCCACHE_CXX=sccache c++" >> "$GITHUB_ENV"
        fi
        echo "CMAKE_C_COMPILER_LAUNCHER=sccache" >> "$GITHUB_ENV"
        echo "CMAKE_CXX_COMPILER_LAUNCHER=sccache" >> "$GITHUB_ENV"
        if [ "$RUNNER_ENVIRONMENT" == "github-hosted" ]; then
          echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
        fi

    - name: Checkout NSS
      if: ${{ !steps.nss.outputs.use_system_nss }}
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: nss-dev/nss
        path: nss

    - name: Checkout NSPR
      if: ${{ !steps.nss.outputs.use_system_nss }}
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: nss-dev/nspr
        path: nspr

    - name: Get head revisions
      id: heads
      if: ${{ !steps.nss.outputs.use_system_nss }}
      shell: bash
      run: |
        NSS_HEAD=$(git -C nss rev-parse HEAD)
        NSPR_HEAD=$(git -C nspr rev-parse HEAD)
        echo "nss_head=$NSS_HEAD" >> "$GITHUB_OUTPUT"
        echo "nspr_head=$NSPR_HEAD" >> "$GITHUB_OUTPUT"

    - name: Cache NSS
      id: cache
      if: ${{ !steps.nss.outputs.use_system_nss && runner.environment == 'github-hosted' }}
      uses: actions/cache/restore@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
      with:
        path: dist
        key: nss-${{ inputs.target && inputs.target || runner.os }}-${{ runner.arch }}-${{ inputs.type }}-${{ steps.heads.outputs.nss_head }}-${{ steps.heads.outputs.NSPR_HEAD }}

    - name: Check if build is needed
      id: check_build
      if: ${{ !steps.nss.outputs.use_system_nss }}
      env:
        CACHE_HIT: ${{ steps.cache.outputs.cache-hit }}
        RUNNER_ENVIRONMENT: ${{ runner.environment }}
      shell: bash
      run: |
        if [ "$RUNNER_ENVIRONMENT" != "github-hosted" ] || [ ! "$CACHE_HIT" ]; then
          echo "Building NSS from source"
          echo "build_nss=1" >> "$GITHUB_OUTPUT"
        else
          echo "Using cached prebuilt NSS"
        fi

    - name: Install build dependencies (Linux)
      shell: bash
      if: ${{ runner.os == 'Linux' && steps.check_build.outputs.build_nss && runner.environment == 'github-hosted' }}
      env:
        DEBIAN_FRONTEND: noninteractive
      run: sudo apt-get install -y --no-install-recommends gyp ninja-build

    - name: Install build dependencies (MacOS)
      shell: bash
      if: ${{ runner.os == 'MacOS' && steps.check_build.outputs.build_nss }}
      run: |
        brew install ninja
        echo "gyp-next>=0.18.1" > req.txt
        python3 -m pip install --break-system-packages -r req.txt

    - name: Install build dependencies (Windows)
      shell: bash
      if: ${{ runner.os == 'Windows' && steps.check_build.outputs.build_nss }}
      run: |
        # shellcheck disable=SC2028
        {
          echo C:/msys64/usr/bin
          echo C:/msys64/mingw64/bin
        } >> "$GITHUB_PATH"
        /c/msys64/usr/bin/pacman -S --noconfirm python3-pip nsinstall
        echo "gyp-next>=0.18.1" > req.txt
        python3 -m pip install -r req.txt

    - name: Set up MSVC (Windows)
      if: ${{ runner.os == 'Windows' && steps.check_build.outputs.build_nss }}
      uses: ilammy/msvc-dev-cmd@v1 # zizmor: ignore[unpinned-uses]
      # TODO: Would like to pin this, but the Mozilla org allowlist requires "ilammy/msvc-dev-cmd@v1*"
      # uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0

    - name: Set up build environment (Windows)
      shell: bash
      if: ${{ runner.os == 'Windows' && steps.check_build.outputs.build_nss }}
      run: |
        {
          echo "GYP_MSVS_OVERRIDE_PATH=$VSINSTALLDIR"
          echo "GYP_MSVS_VERSION=2022"
          echo "BASH=$SHELL"
        } >> "$GITHUB_ENV"
        # See https://github.com/ilammy/msvc-dev-cmd#name-conflicts-with-shell-bash
        rm /usr/bin/link.exe || true

    - name: Set up environment
      shell: bash
      if: ${{ !steps.nss.outputs.use_system_nss }}
      env:
        NSS_TARGET: ${{ inputs.type }}
        NSS_TYPE: ${{ inputs.type }}
        NSS_DIR: ${{ github.workspace }}/nss
      run: |
        NSS_OUT="${{ github.workspace }}/nss/../dist/$NSS_TARGET"
        {
          echo "LD_LIBRARY_PATH=$NSS_OUT/lib"
          echo "DYLD_FALLBACK_LIBRARY_PATH=$NSS_OUT/lib"
          echo "NSS_TARGET=$NSS_TARGET"
          echo "NSS_DIR=$NSS_DIR"
          echo "NSS_PREBUILT=1"
        } >> "$GITHUB_ENV"
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "$NSS_OUT/lib" >> "$GITHUB_PATH"
        fi

    - name: Build
      shell: bash
      if: ${{ steps.check_build.outputs.build_nss }}
      env:
        TARGET_PLATFORM: ${{ inputs.target }}
      run: |
        if [ "$NSS_TARGET" != "Debug" ]; then
          # We want to do an optimized build for accurate CPU profiling, but
          # we also want debug symbols and frame pointers for that, which the normal optimized NSS
          # build process doesn't provide.
          OPT="-o"
          [ "${{ runner.os }}" != "Windows" ] && export CFLAGS="-ggdb3 -fno-omit-frame-pointer"
        fi
        if [[ $TARGET_PLATFORM == *android ]]; then
          for file in build-nss-android.sh build-android-common.sh; do
            curl -o "$file" -sSf "https://raw.githubusercontent.com/mozilla/application-services/refs/heads/main/libs/$file"
          done
          ANDROID_NDK_API_VERSION=$(basename "$ANDROID_NDK_HOME")
          # See https://github.com/mozilla/application-services/blob/46cacda811da094653dc8e93158956f4cd57e87a/libs/build-all.sh#L89-L102
          # It figures that NSPR would require monkey-patching to build on Android.
          cat <<'EOF' > configure.patch
          diff --git a/configure b/configure
          index 841fcdd1..0997cfe4 100755
          --- a/configure
          +++ b/configure
          @@ -2662,6 +2662,9 @@ esac

          case "$target" in
          *-android*|*-linuxandroid*)
          +    $as_echo "#define ANDROID 1" >>confdefs.h
          +    ;;
          +unreachable)
              if test -z "$android_ndk" ; then
                  as_fn_error $? "You must specify --with-android-ndk=/path/to/ndk when targeting Android." "$LINENO" 5
              fi
          EOF
          cat configure.patch
          patch nspr/configure configure.patch
          bash -x build-nss-android.sh "$(pwd)" "$(pwd)/dist" "$ANDROID_NDK" "$TARGET_PLATFORM" "$ANDROID_NDK_API_VERSION"
        else
          [ "$SCCACHE_CC" ] && [ "$SCCACHE_CXX" ] && export CC="$SCCACHE_CC" CXX="$SCCACHE_CXX"
          $NSS_DIR/build.sh -g -Ddisable_tests=1 $OPT --static
        fi
